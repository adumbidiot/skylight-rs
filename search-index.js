var searchIndex = JSON.parse('{\
"skylight":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,0,13,3,4,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,3,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["handleapi","libloaderapi","objbase","oleauto","processthreadsapi","shlobj","tlhelp32","winbase","wincrypt","winerror","Handle","as_raw","borrow","borrow_mut","close","drop","fmt","from","from_raw","into","into_raw","try_from","try_into","type_id","HModule","as_raw","borrow","borrow_mut","destroy","drop","from","into","load","try_from","try_into","type_id","CoTaskMemWideString","as_os_string","as_slice","borrow","borrow_mut","create_instance","drop","fmt","from","from_raw","init_mta_com_runtime","into","is_empty","iter","len","new","try_from","try_into","type_id","bstr","AllocFailed","BStr","BStrCreationError","BStrDisplay","BStrRef","IterTooLarge","IterTooShort","LenTooLarge","as_bstr_ref","as_mut_bstr_ref","as_mut_ptr","as_ptr","as_wide_slice","as_wide_slice_with_nul","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chars","contains_nul","deref","deref_mut","display","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_mut_ptr","from_ptr","from_raw","from_str","from_wide_iter","from_wide_slice","hash","hash","into","into","into","into_raw","is_empty","len","ne","new","source","to_os_string","to_owned","to_string","to_string","to_string_lossy","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","Process","ProcessAccessRights","SYNCHRONIZE","TERMINATE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","ne","not","open","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","terminate","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","wait","ConstantSpecialItemIdList","Desktop","Desktop","FolderId","LocalAppData","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","get_known_folder_path","get_special_folder_path","hash","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ProcessEntry","ProcessIter","SNAP_ALL","Snapshot","SnapshotFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","cmp","complement","contains","difference","empty","eq","exe_name","exe_name_wide_slice","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_snapshot","hash","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","iter_processes","ne","new","next","not","num_threads","partial_cmp","pid","remove","set","sub","sub_assign","symmetric_difference","thread_base_priority","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","LocalWideString","LocalWideStringDisplay","as_mut_ptr","as_os_string","as_slice","borrow","borrow","borrow_mut","borrow_mut","chars","destroy","display","drop","fmt","fmt","from","from","from_raw","get_user_name","into","into","is_empty","len","to_str","to_str_lossy","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DataBlob","DecryptedData","as_mut_ptr","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","crypt_unprotect_data","decrypted","description","destroy","drop","fmt","fmt","from","from","from","from","from_slice","into","into","is_empty","len","try_from","try_from","try_into","try_into","type_id","type_id","0","HResult","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","from","get_last_error","hash","into","message","message_with_hmodule","ne","to_owned","to_string","try_from","try_into","type_id"],"q":["skylight","","","","","","","","","","skylight::handleapi","","","","","","","","","","","","","","skylight::libloaderapi","","","","","","","","","","","","skylight::objbase","","","","","","","","","","","","","","","","","","","skylight::oleauto","skylight::oleauto::bstr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::processthreadsapi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::shlobj","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::tlhelp32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::winbase","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::wincrypt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skylight::winerror","","","","","","","","","","","","","","","","","","","","","",""],"d":["handleapi.h Utilities","libloaderapi.h Utilities","objbase.h Utilities","oleauto.h Utilities","processthreadsapi.h Utilities","shlobj.h Utilities","tlhelp32.h Utilities","winbase.h Utilities","wincrypt.h Utilities","winerror.h Utilities","A wrapper around a winapi <code>HANDLE</code>.","Get the inner <code>HANDLE</code>.","","","Try to close this [<code>Handle</code>].","","","","Make a new [<code>Handle</code>] from a <code>HANDLE</code>.","","Get the inner <code>HANDLE</code>, consuming this object and NOT …","","","","A dynamically loaded library","Get the raw HMODULE","","","Destroy this object.","","","","Load a library from a string/path.","","","","A Wide String allocated with CoTaskMemAlloc.","Get this as an [<code>OsString</code>].","Get a slice from this.","","","Make a new com object from the given class ID.","","","","Make a new [<code>CoTaskMemWideString</code>] from a non-null u16 ptr.","Init a MTA COM runtime. Only needs to be called once per …","","Check if this string is empty.","Iterate over the code points in this wide string.","Get the length of the string.","Allocate a new string.","","","","A wrapper around a <code>BSTR</code> allocated with <code>SysAllocStringLen</code> …","Failed to allocate a [<code>BStr</code>] using <code>SysAllocStringLen</code> or …","A BStr allocated using <code>SysAllocString</code> or similar. This …","An Error that may occur while creating a [<code>BStr</code>].","A [<code>BStrRef</code>] wrapper that implments <code>Display</code>. This forwars …","A reference to a <code>BSTR</code>.","The iterator was too long. Use <code>take(len)</code> before passing …","The iterator was too short. Make sure <code>len == iter.count()</code>.","Failed to convert the input length into a [<code>u32</code>]","Get this [<code>BStr</code>] as a <code>&BStrRef</code>.","Get this [<code>BStr</code>] as a <code>&mut BStrRef</code>.","Get a <code>mut</code> ptr to the data. This is guaranteed to be …","Get a <code>const</code> ptr to the data. This is guaranteed to be …","Get this [<code>BStrRef</code>] as a wide char slice. This WILL NOT …","Get this [<code>BStrRef</code>] as a wide char slice. This WILL …","","","","","","","","","","Try to iterate over the chars in this string.","Returns true if this [<code>BStrRef</code>] contains any interior NULs.","","","Make a new [<code>BStrDisplay</code>] from this reference. [<code>BStrDisplay</code>…","","","","","","","","","","","","","","","","","","","","","","","","Make a &mut [<code>BStrRef</code>] from a <code>BSTR</code> ptr.","Make a &[<code>BStrRef</code>] from a <code>BSTR</code> ptr.","Make a new [<code>BStr</code>] from a raw BSTR ptr.","","Try to make a new [<code>BStr</code>] from a wide char iterator.","Try to make a new [<code>BStr</code>] from a wide char slice.","","","","","","Leak this [<code>BStr</code>] and return the inner pointer.","Checks if this [<code>BStrRef</code>] is empty.","Get the len of this [<code>BStrRef</code>] in bytes. Note that chars …","","Make a new [<code>BStr</code>]. This is a convenience function for …","","Gets this [<code>BStrRef</code>] as an [<code>OsString</code>]. This will allocate …","","","","Converts this [<code>BStr</code>] to a [<code>String</code>] lossily. This …","","","","An upfront length calc is needed to allocate the correct …","This delegates to the <code>TryFrom<&OsStr></code> impl.","","","","","","Make a new [<code>BStr</code>]. This is a convenience function for …","","","","","A Process","Process access rights for opening access to a process.","Synchronize right","Terminate right","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Try to close this [<code>Process</code>] handle.","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>…","Returns an empty set of flags.","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","Open an existing process.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code>…","Signal this process to terminate. This requires the …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Wait for this process to terminate until the given …","The location of a folder","The current user’s desktop","The desktop","A folder type Known Folder Ids","The folder that is a “data repository for local …","","","","","","","","","","","","","","","Get a known folder path.","Get a folder path from a csidl.","","","","","","","","","","","","A Process Entry.","An iterator over processes in a [<code>Snapshot</code>].","","A Snapshot of process and heap info.","The flags to pass when creating a new [<code>Snapshot</code>].","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","Try to close this [<code>Snapshot</code>].","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>…","Returns an empty set of flags.","","Get the exe name as an OsString. This allocates per call, …","Get the exe name as a wide character slice. This may or …","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Make a [<code>ProcessIter</code>] from a <code>&mut</code> [<code>Snapshot</code>].","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iter over the processes in this snapshot.","","Get a new [<code>Snapshot</code>].","","Returns the complement of this set of flags.","Get the number of threads created by this process.","","Get the PID of this [<code>ProcessEntry</code>].","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code>…","Get the thread base priority of this process.","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","A Wide String that has been allocated with <code>LocalAlloc</code>.","A struct that implements display for [<code>LocalWideString</code>]","Get a mut ptr to the string","Get this as an [<code>OsString</code>].","Get this string as a slice of u16s.","","","","","Try to iterate over the chars in this string","Try to destroy this object.","Get a struct that implements display lossily for this …","","","","","","Make a [<code>LocalWideString</code>] from a ptr.","Get the user name of the current user.","","","This is an O(n) operation.","Get the length of the string in characters.","Convert this to a [<code>String</code>].","Convert this to a [<code>String</code>] lossily.","","","","","","","","A wincrypt DataBlob.","Data decrypted with [<code>crypt_unprotect_data</code>].","Get a mut ptr to the inner value","","Get this blob as a byte slice.","","","","","Decrypt data encrypted with <code>CryptProtectData</code>.","The decrypted data","The description of the decrypted data","Try to destroy this object.","","","","","","","","Make a [<code>DATA_BLOB</code>] from a byte slice.","","","Check if this blob is empty.","Get the length of this blob","","","","","","","","A wrapper for a windows HRESULT.","","","","","","","","","","","Get the last error for this thread","","","Get the message for this error using default settings.","Get the message for this error loading definitions from a …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,0,3,3,3,3,0,3,3,3,3,3,3,3,3,0,4,0,0,0,0,4,4,4,5,5,6,6,6,6,5,5,6,7,4,5,6,7,4,6,6,5,5,6,5,5,5,5,5,5,5,6,6,6,6,6,6,4,5,6,7,7,4,4,5,7,4,6,6,5,5,5,5,5,6,5,7,4,5,6,6,4,5,4,6,6,7,4,6,5,5,5,5,5,7,4,5,7,4,5,5,6,7,4,0,0,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,8,9,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,8,8,8,8,8,8,8,8,9,8,8,8,8,9,8,8,8,8,8,8,9,8,8,8,9,8,9,8,9,8,9,0,10,11,0,10,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,0,10,10,11,10,11,10,11,10,11,10,11,0,0,12,0,0,12,12,12,12,12,12,12,12,13,14,12,15,13,14,12,15,12,12,15,12,12,12,12,12,12,14,14,12,14,12,12,12,12,12,15,13,14,14,12,15,12,12,12,12,13,12,12,12,12,13,14,12,15,13,12,12,15,12,15,13,12,14,12,14,12,12,12,12,12,14,12,12,13,14,12,15,13,14,12,15,13,14,12,15,12,0,0,16,16,16,16,17,16,17,16,16,16,16,16,17,16,17,16,0,16,17,16,16,16,16,17,16,17,16,17,16,17,0,0,18,18,18,18,19,18,19,0,19,19,18,18,18,19,18,18,18,19,18,18,19,18,18,18,19,18,19,18,19,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["handle",6]],[[]],[[]],[[],["result",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[["handle",6]]],[[]],[[],["handle",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["hmodule",6]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[["osstr",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["osstring",3]],[[]],[[]],[[]],[[["clsid",6],["dword",6]],[["result",4],["hresult",3]]],[[]],[[["formatter",3]],["result",6]],[[]],[[["nonnull",3],["u16",15]]],[[],[["result",4],["hresult",3]]],[[]],[[],["bool",15]],[[]],[[],["usize",15]],[[["osstr",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[],["bstrref",3]],[[],["bstrref",3]],[[]],[[]],[[]],[[]],[[],["bstrref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bstrdisplay",3]],[[]],[[["str",15]],["bool",15]],[[["bstrref",3]],["bool",15]],[[],["bool",15]],[[["osstr",3]],["bool",15]],[[],["bool",15]],[[["osstr",3]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["osstr",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[],["bool",15]],[[["bstr",3]],["bool",15]],[[["bstrcreationerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["usize",15]],[["bstrcreationerror",4],["result",4]]],[[],[["bstrcreationerror",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["bstrcreationerror",4]],["bool",15]],[[]],[[],[["error",8],["option",4]]],[[],["osstring",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["bstrref",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["osstr",3]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["bstrcreationerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[["processaccessrights",3]]],[[]],[[],["dword",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["processaccessrights",3]],[[]],[[],["result",4]],[[["processaccessrights",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[["processaccessrights",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["dword",6]],["option",4]],[[["dword",6]]],[[["dword",6]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["processaccessrights",3]],["bool",15]],[[]],[[["u32",15],["processaccessrights",3]],["result",6]],[[["processaccessrights",3]],[["option",4],["ordering",4]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[["u32",15]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u32",15]],["result",6]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["folderid",4]],[[],["constantspecialitemidlist",4]],[[]],[[]],[[["folderid",4]],["bool",15]],[[["constantspecialitemidlist",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["folderid",4]],[["result",6],["cotaskmemwidestring",3]]],[[["constantspecialitemidlist",4],["bool",15]],[["pathbuf",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[["snapshotflags",3]]],[[]],[[],["dword",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["snapshotflags",3]],[[]],[[],["result",4]],[[["snapshotflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[["snapshotflags",3]],["bool",15]],[[],["osstring",3]],[[]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["processentry32w",3]]],[[]],[[]],[[["dword",6]],["option",4]],[[["dword",6]]],[[["dword",6]]],[[["intoiterator",8]]],[[["snapshot",3]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["processiter",3]],[[["snapshotflags",3]],["bool",15]],[[["snapshotflags",3]],[["error",3],["result",4]]],[[],["option",4]],[[]],[[],["u32",15]],[[["snapshotflags",3]],[["option",4],["ordering",4]]],[[],["u32",15]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[],["osstring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["localwidestringdisplay",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["nonnull",3],["u16",15]]],[[],[["osstring",3],["result",6]]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],[["fromutf16error",3],["result",4],["string",3]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["decrypteddata",3],["result",6]]],null,null,[[],["result",4]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["hresult",3]],[[]],[[["hresult",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],[["result",6],["localwidestring",3]]],[[["hmodule",3],["option",4]],[["result",6],["localwidestring",3]]],[[["hresult",3]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Handle"],[3,"HModule"],[3,"CoTaskMemWideString"],[4,"BStrCreationError"],[3,"BStr"],[3,"BStrRef"],[3,"BStrDisplay"],[3,"ProcessAccessRights"],[3,"Process"],[4,"FolderId"],[4,"ConstantSpecialItemIdList"],[3,"SnapshotFlags"],[3,"ProcessIter"],[3,"ProcessEntry"],[3,"Snapshot"],[3,"LocalWideString"],[3,"LocalWideStringDisplay"],[3,"DataBlob"],[3,"DecryptedData"],[3,"HResult"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};